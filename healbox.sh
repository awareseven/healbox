#!/usr/bin/env bash

# set -e

APTLOG=$HOME/healbox-apt.log
HEALBOXLOG=$HOME/healbox.log

COL_NC='\e[0m' # No Color
COL_LIGHT_GREEN='\e[1;32m'
COL_LIGHT_RED='\e[1;31m'
TICK="[${COL_LIGHT_GREEN}\xE2\x9C\x94${COL_NC}]"
CROSS="[${COL_LIGHT_RED}✗${COL_NC}]"
INFO="[i]"

show_ascii_healbox() {
    echo -e "
   _                _ _                    _      
  | |__   ___  __ _| | |__   _____  __  __| | ___ 
  | '_ \\ / _ \\/ _\` | | '_ \\ / _ \\ \\/ / / _\` |/ _ \\
  | | | |  __/ (_| | | |_) | (_) >  < | (_| |  __/
  |_| |_|\\___|\\__,_|_|_.__/ \\___/_/\\_(_)__,_|\\___|
       reading email on a customized raspberry
"
}

do_new_random_hostname() {
    # Setzt einen neuen Hostname mit dem der Raspberry Pi sich im
    # Netzwerk anmeldet. Das Format hat die Form 'healbox-xxxxxx'
    # wobei xxxxxx durch 6 zufällige Zeichen ersetzt wird.
    rand6=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 6 | head -n 1)
    NEW_HOSTNAME="healbox-${rand6}"
    CURRENT_HOSTNAME=`cat /etc/hostname | tr -d " \t\n\r"`
    hostnamectl set-hostname $NEW_HOSTNAME

    sed -i "s/127.0.1.1.*$CURRENT_HOSTNAME/127.0.1.1\t$NEW_HOSTNAME/g" /etc/hosts
    local str="Setze neuen Hostname: ${NEW_HOSTNAME}"
    printf "  %b %s\\n" "${TICK}" "${str}"
}

bluetooth_disable() {
    # Bluetooth wird deaktiviert mit dem Ziel weniger Dienste aktiviert zu haben.
    
    local str="Deaktiviere Bluetooth"
	# Bluetooth in boot config abschalten
    cat <<EOF >/boot/config.txt
dtoverlay=pi3-disable-bt
EOF

    # Laden der Bluetooth Treiber verhindern
    cat <<EOF >/etc/modprobe.d/raspi-blacklist.conf
blacklist btbcm
blacklist hci_uart
EOF
		
    # Dienste deaktivieren, die versuchen bluetooth zu starten
    systemctl is-active --quiet hciuart   && systemctl disable --quiet hciuart.service
    systemctl is-active --quiet bluealsa  && systemctl disable --quiet bluealsa.service
    systemctl is-active --quiet bluetooth && systemctl disable --quiet bluetooth.service
    apt-get remove -q -y --purge bluealsa >> $APTLOG 2>&1

    printf "  %b %s\n" "${TICK}" "${str}"
}

packages_remove() {
    # Entferne Software, die nicht benötigt werden für den Einsatz als reines
    # System zum Lesen von E-Mails

    str="Entferne nicht benötigte Software, dies kann einen Moment in Anspruch
      nehmen:"
    printf "  %b %s " "${INFO}" "${str}"
    pkg=("geany python3-thonny chromium-browser vlc dillo epiphany-browser"
"yad tk galculator realvnc-vnc-server gcc g++ make" 
"build-essential"
"tcl8.6 tk8.6 default-jre openjdk-11-jre openjdk-11-jre-headless"
"gstreamer1.0-x gstreamer0.10-alsa gstreamer1.0* ruby2.5"
"ffmpeg omxplayer va-driver-all vdpau-driver-all avahi-daemon"
"binutils rsync")
    for item in "${pkg[@]}";
    do
        printf "*"
        apt-get remove -y --quiet --purge $item  >> $APTLOG 2>&1
    done
    printf "\n"
    str="Entferne automatisch installierte Software, die nicht benötigt wird."
    printf "  %b %s\n" "${INFO}" "${str}"
    apt-get autoremove --purge -y >> $APTLOG 2>&1

    str="Zusätzliche Software wurde entfernt, siehe '${APTLOG}'."
    printf "  %b %s\n" "${TICK}" "${str}"
}

autologin_disable() {
    # Deaktiviere automatisches Anmelden. In der Grundkonfiguration wird der Benutzer
    # pi automatisch am System angemeldet.

    local str="Automatisches Anmelden deaktiviert.  
      Der Benutzer muss sich mit einem Passwort anmelden."
    local autologinconf="/etc/systemd/system/getty@tty1.service.d/autologin.conf"
    systemctl set-default --quiet graphical.target
    ln -fs /lib/systemd/system/getty@.service /etc/systemd/system/getty.target.wants/getty@tty1.service
    [ -f $autologinconf ] && rm $autologinconf
    sed /etc/lightdm/lightdm.conf -i -e "s/^autologin-user=.*/#autologin-user=/"
    printf "  %b %s\n" "${TICK}" "${str}"
}

unattended_upgrades() {
    # Updates werden automatisch im Hintergrund installiert.
    # Updates for testing stuff "o=Raspberry Pi Foundation,a=testing"; >> 50unattended-upgrades
    local str="Updates werden automatisch installiert."
    apt-get install -y unattended-upgrades >> $APTLOG 2>&1
    dpkg-reconfigure --default-priority unattended-upgrades
    cp /etc/apt/apt.conf.d/50unattended-upgrades  /etc/apt/apt.conf.d/50unattended-upgrades-bak
    sed -i '/^Unattended-Upgrade.*/a "origin=Raspberry Pi Foundation,a=testing";' /etc/apt/apt.conf.d/50unattended-upgrades
    sed -i '/^Unattended-Upgrade.*/a "origin=Raspbian,codename=${distro_codename},label=Raspbian";' /etc/apt/apt.conf.d/50unattended-upgrades
	printf "  %b %s\n" "${TICK}" "${str}"
}

firewall_setup() {
    # Firewall wird eingerichtet, es werden nur Ports geöffnet, die für den 
    # Betrieb erforderlich sind.

    IPRULES=$HOME/iptablel_rules.v4
    cat << EOF > $IPRULES
# Generated by iptables-save v1.6.0 on Mon Jun 17 10:28:57 2019
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]

-P INPUT DROP
-P FORWARD DROP
-P OUTPUT DROP

# Allow traffic on lo, drop traffic to 127/8 not using lo
-A INPUT -i lo -j ACCEPT
-A INPUT ! -i lo -d 127.0.0.0/8 -j REJECT

# Accept established inbound connections
# needed?
-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

# http opened for upgrades, apt uses mirrors
-A OUTPUT -p tcp -m state --state NEW,ESTABLISHED --dport 80 -j ACCEPT
-A INPUT  -p tcp -m state --state ESTABLISHED     --sport 80 -j ACCEPT

# ntp
-A OUTPUT -p udp --dport 123 -j ACCEPT
-A INPUT -p udp --sport 123 -j ACCEPT

# https
-A OUTPUT -p tcp -m state --state NEW,ESTABLISHED --dport 443 -j ACCEPT
-A INPUT  -p tcp -m state --state ESTABLISHED     --sport 443 -j ACCEPT

# DNS
-A OUTPUT -p udp -m state --state NEW --dport 53 -j ACCEPT
-A INPUT -p udp -m state --state NEW --dport 53 -j ACCEPT

# SSL POP 995, IMAP 993, SMTP 465, 
# TLS POP 110, IMAP 143, SMTP 25, 587
-A OUTPUT -p tcp -m state --state NEW,ESTABLISHED -m multiport --dports 995,993,465,110,143,25,587 -j ACCEPT
-A INPUT  -p tcp -m state --state ESTABLISHED     -m multiport --sports 995,993,465,110,143,25,587 -j ACCEPT

# log iptables denied calls
-A INPUT -m limit --limit 5/min -j LOG --log-prefix "iptables denied:" --log-level 7
-A OUTPUT -m limit --limit 5/min -j LOG --log-prefix "iptables denied:" --log-level 7

# REJECT OTHER
# -A INPUT -j REJECT
# -A FORWARD -j REJECT
# -A OUTPUT -j REJECT

COMMIT
EOF

    local str="Firewall ist eingerichtet. "
    apt-get install -y  iptables >> $APTLOG 2>&1
    iptables-restore < $IPRULES
    iptables-save  > /etc/iptables.up.rules
    cat << EOF > /etc/network/if-pre-up.d/iptables
#!/bin/sh
 /sbin/iptables-restore < /etc/iptables.up.rules
EOF
    chmod +x /etc/network/if-pre-up.d/iptables
    printf "  %b %s\n" "${TICK}" "${str}"
}


ssh_disable() {
    # Entferne den Dienst ssh

    local str="Deaktiviere und entferne den Dienst ssh."
    systemctl stop --quiet ssh.service
    apt-get -y --purge remove openssh-client openssh-server openssh-sftp-server >> $APTLOG 2>&1 
    printf "  %b %s\n" "${TICK}" "${str}"
}


strong_passwords() {
    local str="Richte stärkere Passwortregeln ein. "

    if [ -f /etc/security/pwquality.conf ]; then
        mv /etc/security/pwquality.conf /etc/security/pwquality.conf-bak
    fi
    apt-get install -y cracklib-runtime     >> $APTLOG 2>&1
    apt-get install -y libpam-pwquality     >> $APTLOG 2>&1
    apt-get install -y libpwquality-tools   >> $APTLOG 2>&1
    cat << EOF >> /etc/security/pwquality.conf
difok = 3
minlen = 8
minclass = 4
maxrepeat = 3
dictcheck = 1
usercheck = 1
enforce_for_root
EOF
    printf "  %b %s\n" "${TICK}" "${str}"
}

thunderbird_install() {
    printf "  [i] Installiere Office und E-Mail Programme. Dies kann auch in Abhängigkeit\n"
    printf "      der Internetverbindung, etwas Zeit in Anspruch nehmen.\n"
    local str="Installiere Email Programm Thunderbird"
    apt-get install -y thunderbird thunderbird-l10n-de 	>> $APTLOG 2>&1
    printf "  %b %s\n" "${TICK}" "${str}"

    local str="Installiere Office Programm Libreoffice"
    apt-get install -y libreoffice-writer 		>> $APTLOG 2>&1
    printf "  %b %s\n" "${TICK}" "${str}"
    if [ -f /etc/xdg/lxsession/LXDE-pi/autostart ]; then
	grep "@thunderbird" /etc/xdg/lxsession/LXDE-pi/autostart >> $APTLOG
	if [ ! $? -eq 0 ]; then
    	    echo "@thunderbird" >> /etc/xdg/lxsession/LXDE-pi/autostart
	    printf "      Automatischer Start von Thunderbird beim einloggen\n"
	fi
    fi
}

umask_set() {
    local str="Passe Zugriffsrechte für neue Datein an."
    [ -f /etc/init.d/rc  ] && sed -i 's/umask 022/umask 027/' /etc/init.d/rc
    [ -f /etc/login.defs ] && sed -i 's/umask 022/umask 027/' /etc/login.defs
    echo "umask 0027" >> /etc/profile
    printf "  %b %s\n" "${TICK}" "${str}"
}


old_config_remove() {
    str="Entferne alte Konfigurationsdateien"
    oldconf=$( dpkg --list | grep "^rc" )
    if [ "$oldconf" != "" ]; then
        dpkg --list | grep "^rc" | cut -d " " -f 3 | xargs dpkg --purge >> $APTLOG 2>&1
    fi
    printf "  %b %s\n" "${TICK}" "${str}"
}

do_new_user() {
    rand3=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 3 | head -n 1)
    NEW_USER="hb-${rand3}"
    printf "\n      Erstelle einen neuen Benutzer $NEW_USER\n"
    /usr/sbin/useradd -m $NEW_USER
    if [ $? -eq 0 -o $? -eq 4 -o $? -eq 9 ]; then
        NEW_USER_CREATED=0
    else
        NEW_USER_CREATED=1
    fi
    if [ $NEW_USER_CREATED -eq 1 ]; then
        printf " Neuer Benutzer konnte nicht angelegt werden. "
        return 
    fi
    adduser -q $NEW_USER sudo    >> $HEALBOXLOG 2>&1
    adduser -q $NEW_USER netdev  >> $HEALBOXLOG 2>&1
    adduser -q $NEW_USER users   >> $HEALBOXLOG 2>&1
    local USER_PASS_SET=1
    while [ ! $USER_PASS_SET -eq 0 ];
    do
    	printf "      Geben Sie für den neuen Benutzer ${NEW_USER} ein Password ein:\n"
    	printf "      (Mindestens 8 Zeichen, mit Ziffer, Groß und Kleinbuchstaben und\n"
    	printf "       Sonderzeichen.)\n"
    	passwd $NEW_USER
    	if [ $? = 0 ]; then
        	USER_PASS_SET=0
    	else
		printf "    Es wurde kein Passwort für den neuen Benutzer ${NEW_USER} gesetzt.\n\n"
	fi
    done
    local str="Es wurde ein neuer Benutzer ${NEW_USER} angelegt."
    printf "\n  %b %s\n" "${TICK}" "${str}"
}

disable_root() {
    local str="Benuzter root kann sich nicht mehr anmelden" 
    passwd --lock root >> $HEALBOXLOG
    sudo mv /etc/securetty /etc/securetty.orig
    sudo touch /etc/securetty
    sudo chmod 600 /etc/securetty
    printf "  %b %s\n" "${TICK}" "${str}"
    return 
}


do_change_root_passwd() {
    msg='\nBitte geben sie ein Passwort für den Administrator "root" ein:\n'
    printf "    ${msg}"
    passwd
    if [ $? = 0 ]; then
        NEW_ROOT_PASS=0
    else
        NEW_ROOT_PASS=1
        printf "    Kein neues Passwort für root gesetzt!\n"
        printf "    Bitte holen sie dies nach mit dem Befehl: $ sudo passwd\n "
        return 
    fi
    local str="Neues Passwort für Benutzer root."
    printf "  %b %s\n" "${TICK}" "${str}"
}


user_pi_disable() {
    tomorrow=$(date --date "tomorrow" +%Y-%m-%d)
    local str="Der Standard Benuzter pi wird am ${tomorrow} deaktiviert.
      Um dies wieder rückgängig zu machen (nicht empfohlen) verwenden Sie den/n/tfolgenden Befehl:
      $ sudo usermod -e pi"
    usermod -e $tomorrow pi
    printf "  %b %s\n" "${TICK}" "${str}"
}


rpcbind_remove() {
    str="Entferne nfs Unterstützung sowie portmap und rpcbind "
    apt-get remove --purge -y portmap rpcbind nfs-common >> $APTLOG 2>&1
    printf "  %b %s\n" "${TICK}" "${str}"
}


adjust_sudo() {
    local str="Administratorrechte sind nur noch mit Passwort erreichbar."
    pinopasswd="/etc/sudoers.d/010_pi-nopasswd"
    if [ -f $pinopasswd ]; then
        rm $pinopasswd
    fi
    cp /etc/sudoers /tmp/sudoers
    sed -i 's/NOPASSWD://gi' /etc/sudoers
    visudo=$(sudo visudo -c)
    if [ ! $? -eq 0 ]; 
    then
        cp /tmp/sudoers /etc/sudoers
        echo $visudo
        echo "     sudoers wiederhergestellt"
    else
        rm /tmp/sudoers
    fi
    printf "  %b %s\n" "${TICK}" "${str}"
}

final_notes() {
    local str=" System eingerichtet

 #    Das System wurde angepasst.
 #    Ein neuer Benutzer ${NEW_USER} wurde angelegt. 
 #    Starten sie das System neu und melden Sie sich als neuer 
 #    Nutzer ${NEW_USER} an.
 #
 #    Das E-Mail Programm thunderbird startet nach dem Anmelden automatisch. 
 #    Geben Sie dann die Zugangsdaten zu ihrem E-Mail Konto ein.
 #
 #    Mehr Informationen finden sie auch unter:
 #         https://healbox.de/
" 
    printf "  %b %s\n" "${TICK}" "${str}"
}

main() {
    ########## Our First Check ##########
    # Want to be root to install stuff
    local str="Checking for root"
    printf "\\n"

    if [[ "${EUID}" -eq 0 ]]; then
        # they are root and all is good
        printf "  %b %s\\n" "${TICK}" "${str}"
        show_ascii_healbox
    else
        # inform about needing to be root
        printf "  %b %s\\n" "${CROSS}" "${str}"
        printf "  %b %bDas Skript benötigt root Rechte.%b\n" "${INFO}"  "${COL_LIGHT_RED}" "${COL_NC}"
        printf "      Bitte lassen sie das Skript mittels sudo oder als root Benutzer laufen. \n" "${INFO}"
        printf "      $ sudo ./healbox.sh \n\n" "${INFO}"
        exit 1
    fi

    # curl -sI https://aware7.de/ >> /dev/null
    # if [ ! $? -eq 0 ]; then
    #     printf "  %b Es scheint keine Internetverbindung vorzuliegen. Beende das Skript\n" "${CROSS}"
	# exit 1
    # fi

    umask 0027
    printf "  [i] Beginne mit der Anpassung.\n"
    strong_passwords
    umask_set
    autologin_disable

    printf "  %b Deaktiviere Hardware\n" "${INFO}"
    bluetooth_disable    
    packages_remove
    unattended_upgrades
    firewall_setup
    ssh_disable
    rpcbind_remove
    adjust_sudo

    do_new_random_hostname
    old_config_remove

    do_new_user
    disable_root

    thunderbird_install
    user_pi_disable
    final_notes
}

main
